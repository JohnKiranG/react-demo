import React from 'react';
import moment from 'moment';

export const columnStringSorter = (a, b, columnName) => {
  const nameA = (a[columnName]) ? a[columnName].toUpperCase() : ''; // ignore upper and lowercase
  const nameB = (b[columnName]) ? b[columnName].toUpperCase() : ''; // ignore upper and lowercase
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }
  // names must be equal
  return 0;
};

export const columnNumberSorter = (a, b, columnName) => {
  const nameA = Number(a[columnName]);
  const nameB = Number(b[columnName]);
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }
  // names must be equal
  return 0;
};

export const tablePaginationSettings = {
  pageSize: 20,
  position: 'bottom',
  showSizeChanger: true,
  pageSizeOptions: ['10', '20', '30', '40'],
};

export const generateBasicAuthToken = (userName, password) => `Basic ${btoa(`${userName}:${password}`)}`;
export const generateBasicAuthHeader = (userName, password) => `Authorization: ${generateBasicAuthToken(userName, password)}`;

export const onSearch = (param, searchText, list) => {
  const reg = new RegExp(searchText, 'gi');
  const selectedText = list.map(record => {
    const match = record[param].toString().match(reg);
    if (!match) {
      return null;
    }
    return {
      ...record,
      param: (
        <span>
          {record[param].toString().split(new RegExp(`(?<=${searchText})|(?=${searchText})`, 'i')).map(
            text => (text.toLowerCase() === searchText.toLowerCase() ? (
                <span key={record.key} className="highlight">
                  {text}
                </span>
            ) : (
              text
              )), // eslint-disable-line
          )}
        </span>
      ),
    };
  })
    .filter(record => !!record);
  return selectedText;
};

export const getAutoGeneratedVersionName = (study, crfVersion, crf) => {
  console.log(study.client.name);
  const { client: { name }, studyNumber } = study;
  const ecrf = 'ECRF';
  const draftVersion = parseInt(crfVersion.draftVersion, 10);
  const version = crf.concat(crfVersion.finalVersion.toString(), '.').concat(draftVersion.toString());
  const formatedDate = moment(new Date()).format('DDMMYYYY');
  const versionName = [name.substring(0, 4), studyNumber.substring(0, 4), ecrf, version, formatedDate].join('_');
  return versionName;
};

export const serializeQuery = (query) => Object.keys(query)
  .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(query[key])}`)
  .join('&');
